basePath: /api/v1
definitions:
  models.CreateFlavorRequest:
    properties:
      brand:
        type: string
      flavor_name:
        type: string
    type: object
  models.CreateSessionRequest:
    properties:
      creator:
        type: string
      flavors:
        items:
          $ref: '#/definitions/models.CreateFlavorRequest'
        type: array
      mix_name:
        type: string
      notes:
        type: string
      order_details:
        type: string
      session_date:
        type: string
      store_name:
        type: string
    required:
    - session_date
    type: object
  models.CreatorCount:
    properties:
      count:
        type: integer
      creator:
        type: string
    type: object
  models.CreatorStats:
    properties:
      creators:
        items:
          $ref: '#/definitions/models.CreatorCount'
        type: array
    type: object
  models.FlavorCount:
    properties:
      count:
        type: integer
      flavor_name:
        type: string
    type: object
  models.FlavorStats:
    properties:
      all_flavors:
        description: All flavors
        items:
          $ref: '#/definitions/models.FlavorCount'
        type: array
      main_flavors:
        description: First flavors only
        items:
          $ref: '#/definitions/models.FlavorCount'
        type: array
    type: object
  models.SessionFlavor:
    properties:
      brand:
        type: string
      created_at:
        type: string
      flavor_name:
        type: string
      flavor_order:
        type: integer
      id:
        type: string
      session_id:
        type: string
    type: object
  models.SessionWithFlavors:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      creator:
        type: string
      flavors:
        items:
          $ref: '#/definitions/models.SessionFlavor'
        type: array
      id:
        type: string
      mix_name:
        type: string
      notes:
        type: string
      order_details:
        type: string
      session_date:
        type: string
      store_name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.StoreCount:
    properties:
      count:
        type: integer
      store_name:
        type: string
    type: object
  models.StoreStats:
    properties:
      stores:
        items:
          $ref: '#/definitions/models.StoreCount'
        type: array
    type: object
  models.UpdateSessionRequest:
    properties:
      creator:
        type: string
      flavors:
        items:
          $ref: '#/definitions/models.CreateFlavorRequest'
        type: array
      mix_name:
        type: string
      notes:
        type: string
      order_details:
        type: string
      session_date:
        type: string
      store_name:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: API Support
    url: https://github.com/toof-jp/shisha-log
  description: API for tracking and managing shisha (hookah) sessions
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Shisha Log API
  version: "1.0"
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change password for the authenticated user
      parameters:
      - description: Password change data
        in: body
        name: request
        required: true
        schema:
          properties:
            current_password:
              type: string
            new_password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request or validation error
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized or incorrect current password
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Change password
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and receive a JWT token
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          properties:
            password:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            properties:
              token:
                type: string
              user:
                $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Invalid request body
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with user ID and password
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          properties:
            password:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Registration successful
          schema:
            properties:
              message:
                type: string
              token:
                type: string
              user:
                $ref: '#/definitions/models.User'
            type: object
        "400":
          description: Invalid request or validation error
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /auth/request-password-reset:
    post:
      consumes:
      - application/json
      description: Request a password reset token for a user
      parameters:
      - description: Password reset request
        in: body
        name: request
        required: true
        schema:
          properties:
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Reset token generated (token would be sent via secure channel
            in production)
          schema:
            properties:
              message:
                type: string
              reset_token:
                type: string
            type: object
        "400":
          description: Invalid request body
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Request password reset
      tags:
      - auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using a reset token
      parameters:
      - description: Password reset data
        in: body
        name: request
        required: true
        schema:
          properties:
            new_password:
              type: string
            token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Invalid request or token
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Reset password
      tags:
      - auth
  /creators/stats:
    get:
      description: Get creator statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Creator statistics
          schema:
            $ref: '#/definitions/models.CreatorStats'
        "500":
          description: Failed to get creator statistics
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get creator statistics
      tags:
      - statistics
  /flavors/stats:
    get:
      description: Get flavor usage statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Flavor statistics
          schema:
            $ref: '#/definitions/models.FlavorStats'
        "500":
          description: Failed to get flavor statistics
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get flavor statistics
      tags:
      - statistics
  /sessions:
    get:
      description: Get paginated list of sessions for the authenticated user
      parameters:
      - default: 20
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of items to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated sessions list
          schema:
            properties:
              limit:
                type: integer
              offset:
                type: integer
              sessions:
                items:
                  $ref: '#/definitions/models.SessionWithFlavors'
                type: array
              total:
                type: integer
            type: object
        "500":
          description: Failed to get sessions
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get user's sessions
      tags:
      - sessions
    post:
      consumes:
      - application/json
      description: Create a new shisha session for the authenticated user
      parameters:
      - description: Session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.CreateSessionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created session with flavors
          schema:
            $ref: '#/definitions/models.SessionWithFlavors'
        "400":
          description: Invalid request body
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to create session
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Create a new session
      tags:
      - sessions
  /sessions/{id}:
    delete:
      description: Delete a session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session deleted successfully
          schema:
            properties:
              message:
                type: string
            type: object
        "403":
          description: Access denied
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Session not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to delete session
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a session
      tags:
      - sessions
    get:
      description: Get a specific session by its ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Session details with flavors
          schema:
            $ref: '#/definitions/models.SessionWithFlavors'
        "403":
          description: Access denied
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Session not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get a session by ID
      tags:
      - sessions
    put:
      consumes:
      - application/json
      description: Update an existing session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated session data
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated session
          schema:
            $ref: '#/definitions/models.SessionWithFlavors'
        "400":
          description: Invalid request body
          schema:
            properties:
              error:
                type: string
            type: object
        "403":
          description: Access denied
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: Session not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to update session
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Update a session
      tags:
      - sessions
  /sessions/by-date:
    get:
      description: Get all sessions for a specific date
      parameters:
      - description: Date in YYYY-MM-DD format
        in: query
        name: date
        required: true
        type: string
      - description: Timezone (default UTC)
        in: query
        name: timezone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sessions for the specified date
          schema:
            properties:
              date:
                type: string
              sessions:
                items:
                  $ref: '#/definitions/models.SessionWithFlavors'
                type: array
            type: object
        "400":
          description: Invalid date format
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to get sessions
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get sessions by date
      tags:
      - sessions
  /sessions/calendar:
    get:
      description: Get session counts for each day in a specific month
      parameters:
      - description: Year
        in: query
        name: year
        required: true
        type: integer
      - description: Month (1-12)
        in: query
        name: month
        required: true
        type: integer
      - description: Timezone (default UTC)
        in: query
        name: timezone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Map of date strings to session counts
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Invalid parameters
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Failed to get calendar data
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get calendar data
      tags:
      - sessions
  /stores/stats:
    get:
      description: Get store visit statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Store statistics
          schema:
            $ref: '#/definitions/models.StoreStats'
        "500":
          description: Failed to get store statistics
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get store statistics
      tags:
      - statistics
  /users/me:
    get:
      description: Get the current authenticated user's information
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid user ID
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      security:
      - Bearer: []
      summary: Get current user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
